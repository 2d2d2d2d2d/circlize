% \VignetteIndexEntry{Draw genomic figures}
% \VignetteDepends{circlize}
% \VignetteKeywords{circos R}
% \VignetteKeywords{circlize}
% \VignettePackage{circlize}

\documentclass{article}

\title{An introduction of drawing genomic figures with {\it circlize}}

\author{Zuguang Gu {\tt <z.gu@dkfz.de>}}
\usepackage[margin=1in, a4paper]{geometry}

\usepackage{Sweave}
\usepackage{hyperref}

\begin{document}

\maketitle 

\section{Introduction}

Since circos plots are mostly used in genomics research, the {\it circlize} package 
specifically provides functions which are focusing on genomic plots. These functions 
are synonymous to the basic circos graphical functions but expecting special format of input data:

\begin{itemize}
  \item {\tt circos.genomicTrackPlotRegion}: create a new track and add graphics.
  \item {\tt circos.genomicPoints}: low-level function, add points
  \item {\tt circos.genomicLines}: low-level function, add lines
  \item {\tt circos.genomicRect}: low-level function, add rectangles
  \item {\tt circos.genomicText}: low-level function, add text
  \item {\tt circos.genomicLink}: add links
\end{itemize}

The genomic functions are implemented by basic circos functions (e.g. {\tt circos.trackPlotRegion}, {\tt circos.points}),
thus, you can customize your own plots by both genomic functions and basic circos functions.

\section{Input data}

{\it circlize} expects input data as a data frame or a list of data frames in which there are at least three columns.
The first column is genomic category (e.g. chromosome), the second column is start position
on the genome and the third column is the end position. Following columns are optional and some
numeric values or other related values are stored in. Such data structure is quite broadly used
in genomic research and can be easily generated.

This package provides a simple function {\tt generateRandomBed} which can generate random genomic data:

<<echo=TRUE, eval=FALSE>>=
bed = generateRandomBed()
bed = generateRandomBed(nr = 200, nc = 4)
bed = generateRandomBed(fun = function(k) runif(k))
@

\section{Initialize with cytoband data}

Similar as general circos plots, the first step is to initialize the plot with genomic categories.
Normally, genomic categories are measured by chromosomes. The easiest way is to used
{\tt circos.initializeWithIdeogram}:

<<echo=TRUE, eval=FALSE>>=
circos.initializeWithIdeogram()
@

By default, the function will initialize the plot with cytoband data of hg19. You can also use your own cytoband data
by specifying the path of your cytoband file or provide your cytoband data as a data frame.

<<echo=TRUE, eval=FALSE>>=
cytoband.file = paste(system.file(package = "circlize"), "/extdata/cytoBand.txt", sep="")
circos.initializeWithIdeogram(cytoband.file)
cytoband = read.table(cytoband, colClasses = c("character", "numeric", "numeric", "character", "character"), sep = "\t")
cytoband = read.cytoband(cytoband.file)$df
circos.initializeWithIdeogram(cytoband)
@

For simple use, users can specify abbreviation of the species and the function will download cytoband file from UCSC server
automatically.

<<echo=TRUE, eval=FALSE>>=
circos.initializeWithIdeogram(species = "hg18")
circos.initializeWithIdeogram(species = "mm10")
@

By default, it will use all chromosomes which in cytoband data to initialize the circos plot. Users can
also choose a subset of chromosomes by specifying {\tt chromosome.index}. Please note
this argument is only used for subsetting but not for ordering.

<<echo=TRUE, eval=FALSE>>=
circos.initializeWithIdeogram(chromosome.index = c("chr1", "chr2"))
@

Initialization step is important for circos plot. It controls the order of chromosomes
which will be shown on the circle. There are several ways to control it. If cytoband
is provided as a data frame, and if the first column is a factor, the order of chromosomes
would be {\tt levels(cytoband[[1]])}. If the first column is not a factor, the order of 
chromosomes would be {\tt unique(cytoband[[1]])}. If {\tt sort.chr} is set to {\tt TRUE},
chromosomes will be sorted karoyly.

<<echo=TRUE, eval=FALSE>>=
cytoband = read.table(cytoband.file)
circos.initializeWithIdeogram(cytoband, sort.chr = FALSE)
cytoband[[1]] = factor(cytoband[[1]], levels = paste("chr", c(22:1, "X", "Y")))
circos.initializeWithIdeogram(cytoband, sort.chr = FALSE)
cytoband = read.table(cytoband.file)
circos.initializeWithIdeogram(cytoband, sort.chr = TRUE)
@

By default, the function would intialize the circos plot, create a track where there
are genomic axis and chromosome names and create another track where there is ideogram.
{\tt plotType} can be used to control which graphics need to be plotted.

<<echo=TRUE, eval=FALSE>>=
circos.initializeWithIdeogram(plotType = c("axis", "labels"))
circos.initializeWithIdeogram(plotType = NULL)
@

The layout of circos plot can be controlled by {\tt circos.par}

<<echo=TRUE, eval=FALSE>>=
circos.par("start.degree" = 90)
circos.initializeWithIdeogram()

circos.par("gap.degree" = rep(c(2, 4), 11))
circos.initializeWithIdeogram()
@


\section{Initialize with general genomic category}

Cytoband data is just a special situation of genomic category. {\tt circos.genomicInitialize}
can initialize circos plot with any kind of genomic categories. In fact, {\tt circos.initializeWithIdeogram}
is impemented by {\tt circos.genomicInitialize}. The input data is a data frame with at least three
columns. The first column is genomic category (Under the context of cytoband, it is chromosome name),
and the genomic positions in each genomic category. Range for each genomic category is calculated 
from the xx. In the following example, we initialized a circos plot with three genes.

<<echo=TRUE, eval=FALSE>>=
df = data.frame (
	name = c("TP53", "TP63", "TP73"),
	start = c(7565097, 189349205, 3569084),
	end = c(7590856, 189615068, 3652765))
circos.genomicInitialize(df)
@

As explained in previous section, the order of genomic categies is controlled by the first column of {\tt df}
depend whether it is a factor or a simple vector. Alternative names can be assigned to each category

<<echo=TRUE, eval=FALSE>>=
circos.genomicInitialize(df, sector.names = c("tp53", "tp63", "tp73"))
@

\section{Create plot regions}

\subsection{points}
\subsection{lines}
\subsection{text}
\subsection{rectangle}
\subsection{links}
\subsection{other functions}

\section{Other high-level genomic functions}
\subsection{Position transformation}

\subsection{Genomic density}

\subsection{Rainfall plot}

\subsection{combine general circos functions}

\section{Organize complex genomic plots}

\end{document}
